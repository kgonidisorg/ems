services:
  # Database Services
  postgres:
    image: postgres:16-alpine
    container_name: ems-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ems
      POSTGRES_USER: ems_user
      POSTGRES_PASSWORD: ems_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ems_user -d ems"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - deps
      - backend
      - all

  redis:
    image: redis:7-alpine
    container_name: ems-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - deps
      - backend
      - all

  # MQTT Broker for IoT devices
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: ems-mqtt
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./infrastructure/docker/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          "mosquitto_pub -h localhost -t health/check -m 'test' -q 0 || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - deps
      - backend
      - all

  # Message Queue - Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ems-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    profiles:
      - deps
      - backend
      - all

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ems-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - deps
      - backend
      - all

  # Backend Services
  api-gateway:
    image: ghcr.io/kgonidisorg/ems:services
    container_name: ems-api-gateway
    environment:
      - APPLICATION_TYPE=api-gateway
      - SPRING_PROFILES_ACTIVE=docker
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AUTH_SERVICE_HOST=auth-service
      - AUTH_SERVICE_PORT=8081
      - DEVICE_SERVICE_HOST=device-service
      - DEVICE_SERVICE_PORT=8082
      - ANALYTICS_SERVICE_HOST=analytics-service
      - ANALYTICS_SERVICE_PORT=8083
      - NOTIFICATION_SERVICE_HOST=notification-service
      - NOTIFICATION_SERVICE_PORT=8084
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/api/auth/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - backend
      - all

  auth-service:
    image: ghcr.io/kgonidisorg/ems:services
    container_name: ems-auth-service
    environment:
      - APPLICATION_TYPE=auth-service
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ems_auth
      - DB_USERNAME=ems_user
      - DB_PASSWORD=ems_password
      - REDIS_HOST=redis
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8081/api/v1/auth/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - backend
      - all

  device-service:
    image: ghcr.io/kgonidisorg/ems:services
    container_name: ems-device-service
    environment:
      - APPLICATION_TYPE=device-service
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ems_devices
      - DB_USERNAME=ems_user
      - DB_PASSWORD=ems_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MQTT_HOST=mosquitto
      - MQTT_PORT=1883
      - MQTT_CLIENT_ID=device-service
      - MQTT_USERNAME=ems_mqtt
      - MQTT_PASSWORD=ems_mqtt_password
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          "wget --no-verbose --tries=1 --spider http://localhost:8082/api/v1/devices/health && wget --no-verbose --tries=1 --spider http://localhost:8082/api/v1/sites/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - backend
      - all

  analytics-service:
    container_name: ems-analytics-service
    image: ghcr.io/kgonidisorg/ems:services
    environment:
      - APPLICATION_TYPE=analytics-service
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ems_analytics
      - DB_USERNAME=ems_user
      - DB_PASSWORD=ems_password
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8083/api/v1/analytics/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - backend
      - all

  notification-service:
    container_name: ems-notification-service
    image: ghcr.io/kgonidisorg/ems:services
    environment:
      - APPLICATION_TYPE=notification-service
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ems_notifications
      - DB_USERNAME=ems_user
      - DB_PASSWORD=ems_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_CONSUMER_GROUP_ID=notification-service
      - MAIL_HOST=localhost
      - MAIL_PORT=1025
      - MAIL_USERNAME=
      - MAIL_PASSWORD=
    ports:
      - "8084:8084"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8084/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - backend
      - all

  # Frontend service for local development
  frontend:
    image: ghcr.io/kgonidisorg/ems:latest
    container_name: ems-frontend
    ports:
      - "3002:80"
    depends_on:
      - api-gateway
    profiles:
      - frontend
      - all

  telemetry-publisher:
    image: ghcr.io/kgonidisorg/ems:generator
    container_name: ems-telemetry-publisher
    environment:
      - APPLICATION_TYPE=telemetry_publisher
      - MQTT_HOST=mosquitto
      - MQTT_PORT=1883
    depends_on:
      mosquitto:
        condition: service_healthy
    profiles:
      - generator
      - all

  db-cleanup:
    image: ghcr.io/kgonidisorg/ems:generator
    container_name: ems-db-cleanup
    environment:
      - APPLICATION_TYPE=db_cleanup
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=ems_user
      - PGPASSWORD=ems_password
      - CLEANUP_MODE=cron
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - generator
      - all

volumes:
  postgres_data:
  redis_data:
  mosquitto_data:
  mosquitto_logs:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:

networks:
  default:
    name: ems_default
    driver: bridge
